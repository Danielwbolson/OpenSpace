local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require('./transforms')

local transferFunctions = asset.localResource("transferfunctions")
local windSpeedPolarityColorTable = transferFunctions .. "/polarity_spec.txt"
local currentSheetColorTable = transferFunctions .. "/currentsheet_spec.txt"

local sunRadius = 695508000

-- Fieldlies from json
local fieldlines = {
    Identifier = "PSP_WSA_Fieldlines_SCS_OI",
    Parent = transforms.HNMReferenceFrame.Identifier, -- Use this for ADAPT GONG (Parker Solar Probe endpoints)
    Renderable = {
        Type = "RenderableFieldlinesSequence",
        Enabled = false,
        -- Dynamic web content wants a url with a unique id where the data may be fetched.
        DynamicWebContent = "https://iswa.gsfc.nasa.gov/IswaSystemWebApp/FilesInRangeServlet?dataID=1193",
        FlowEnabled = false,
        AlphaBlendlingEnabled = false,
        InputFileType = "osfls",
        ColorTablePaths = {
            windSpeedPolarityColorTable,
            currentSheetColorTable
        }, 
        ColorTableRanges = {
            { -1.0, 1.0 },
            { 0.0, 1.0 },
        },
        LoadAtRuntime = true,
        ScaleToMeters = 1.0,
        SimulationModel = "wsa",
        ColoringMethod = "Quantity",
    },
    GUI = {
        Path = "/Solar System/Heliosphere",
        Name = "PSP WSA SCS Out to In Filled Boundary Lines"
    },
    Transform = {
        Scale = {
            Type = "StaticScale",
            Scale = sunRadius
        },
    }
} 

assetHelper.registerSceneGraphNodesAndExport(asset, { fieldlines })
