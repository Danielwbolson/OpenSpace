local tableLength = function(table)
    local count = 0
    for _ in pairs(table) do count = count + 1 end
    return count
end


local registerSpiceKernels = function (spiceAsset, kernels)
    spiceAsset.onInitialize(function ()
        for i, kernel in ipairs(kernels) do
            openspace.spice.loadKernel(kernel)
        end
    end)
    spiceAsset.onDeinitialize(function ()
        for i = #kernels, 1, -1 do
            kernel = kernels[i]
            openspace.spice.unloadKernel(kernel) 
        end
    end)
end

local registrationFunctions = function (sceneAsset, nodes, overrideWarning)
    overrideWarning = overrideWarning or false
    if not overrideWarning then
        if tableLength(nodes) == 0 then
            openspace.printWarning("Register function was called with an empty node list. Pass 'true' as third argument to silence this warning.")
            return
        end
    end

    local initFunc = function()
        for i, node in ipairs(nodes) do
            openspace.addSceneGraphNode(node)
        end
    end

    local deinitFunc = function()
        for i = #nodes, 1, -1 do
            node = nodes[i]
            openspace.removeSceneGraphNode(node.Identifier)
        end
    end

    return initFunc, deinitFunc
end

local registerSceneGraphNodes = function (sceneAsset, nodes, overrideWarning)
    -- assert((not sceneAsset.onInitialize) and (not sceneAsset.onDeinitialize), "onInitialize or onDeinitialize methods were already specified for this asset. Consider calling 'openspace.addSceneGraphNode' for the nodes directly in it and adding 'onDeinitialize' to call openspace.removeSceenGraphNode'.")

    for i, node in ipairs(nodes) do
        if not node.Identifier then
            openspace.printError("Could not load asset as Identifier was missing")
        end
    end

    local init, deinit = registrationFunctions(sceneAsset, nodes, overrideWarning)

    sceneAsset.onInitialize(init)
    sceneAsset.onDeinitialize(deinit)
end

local registerSceneGraphNodesAndExport = function (sceneAsset, nodes, overrideWarning)
    registerSceneGraphNodes(sceneAsset, nodes, overrideWarning)

    for i, node in ipairs(nodes) do
        assert(node.Identifier, "No identifier specified")
        sceneAsset.export(node.Identifier, node)
    end
end

local requireAll = function (sceneAsset, directory)
    function string.ends(String,End)
       return End=='' or string.sub(String,-string.len(End))==End
    end

    local result = {}

    local files = openspace.walkDirectoryFiles(sceneAsset.localResource('') .. directory, true)
    for _, file in pairs(files) do
        if file:ends('.asset') then
            openspace.printDebug("Requiring: " .. file:sub(file:find(directory), -7))
            local exports = sceneAsset.require(file:sub(1, -7))
            table.insert(result, exports)
        end
    end

    return result
end

local requestAll = function (sceneAsset, directory)
    function string.ends(String,End)
       return End=='' or string.sub(String,-string.len(End))==End
    end

    local files = openspace.walkDirectoryFiles(sceneAsset.localResource('') .. directory, true)
    for _, file in pairs(files) do
        if file:ends('.asset') then
            openspace.printDebug("Requesting: " .. file:sub(file:find(directory), -7))
            sceneAsset.request(file:sub(file:find(directory), -7))
        end
    end
end

asset.export("registrationFunctions", registrationFunctions)
asset.export("registerSceneGraphNodes", registerSceneGraphNodes)
asset.export("registerSceneGraphNodesAndExport", registerSceneGraphNodesAndExport)
asset.export("registerSpiceKernels", registerSpiceKernels)
asset.export("requireAll", requireAll)
asset.export("requestAll", requestAll)
