local assetHelper = asset.require('util/asset_helper')
local kernels = asset.require('./kernels')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')
local marsTransforms = asset.require('scene/solarsystem/planets/mars/transforms')

-- rotate z-axis 45
local RotationMatrix_Z_45 = {
    0.7, 0.7, 0,
    -0.7, 0.7, 0,
    0, 0, 1
}

-- rotate x-axis 90
local RotationMatrix_X = {
    1, 0, 0,
    0, 0, 1,
    0, -1, 0
}

local CuriosityPosition = {
    Name = "CuriosityPosition",
    Parent = "MarsBarycenter",
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = "MSL",
            Observer = "MARS BARYCENTER",
            Kernels = kernels.CuriosityKernels
        },
        --Rotation = {
        --    Type = "SpiceRotation",
        --    SourceFrame = "MSL_ROVER",
        --    DestinationFrame = "GALACTIC"
        --},
        Scale = {
             Type = "StaticScale",
             Scale = 10.0
        }
    },
    GuiPath = "/Solar System/Planets/Mars/Curiosity "
}

local RoverLocation = {
    Name = "RoverLocation",
    Parent = "CuriosityPosition",
    --Transform = {
    --    Translation = {
    --        Type = "SpiceTranslation",
    --        Target = "MARS SCIENCE LABORATORY",
    --        Observer = "MSL_ROVER",
    --        Kernels = kernels.CuriosityKernels
    --    }
    --},
    GuiPath = "/Solar System/Planets/Mars/Curiosity "
}

--AZ
local RA_Shoulder_AZ_Location = {
    Name = "RA_Shoulder_AZ_Location",
    Parent = RoverLocation.Name,
    Transform = {     
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "MSL_RA_SHOULDER_AZ",
            DestinationFrame = "MSL_RA_BASE",
            Kernels = kernels.CuriosityKernels,
            InstrumentCoordinateSystem = "false"
        },
        --Rotation = {
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_X 
        --},
        --Translation = {
        --    Type = "SpiceTranslation",
        --    Target = "MSL_RA_SHOULDER_AZ",
        --    Observer = "MSL_ROVER",
        --    Kernels = kernels.CuriosityKernels
        --},
        Translation = {
            Type = "StaticTranslation",
            -- (x, y, z)
            Position = {1.1, -0.45, -0.11}
        }
    },
    GuiPath = "/Solar System/Planets/Mars/Curiosity "
}

local RA_Shoulder_EL_Location = {
    Name = "RA_Shoulder_EL_Location",
    Parent = RA_Shoulder_AZ_Location.Name,
    Transform = {
        --Rotation = {
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_X
        --},
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "MSL_RA_SHOULDER_EL",
            DestinationFrame = "MSL_RA_SHOULDER_AZ",
            Kernels = kernels.CuriosityKernels,
            InstrumentCoordinateSystem = "true"
        },
        --Rotation = {
        --    Type = "FixedRotation",
        --    XAxis = {1, 0, 0},
        --    YAxis = {0, 0, -1},
        --    ZAxis = {0, -1, 0},
        --},
        --Translation = {
        --    Type = "SpiceTranslation",
        --    Target = "MSL_RA_SHOULDER_EL",
        --    Observer = "MSL_ROVER",
        --    Kernels = kernels.CuriosityKernels
        --}
        --Rotation = {
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_Y
        --}, 
        -- Rotate back from parent
        --Rotation = { 
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_Z_invert
        --},
        --Rotation = {
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_Z_45
        --},
        ---- Rotate back from parent
        --Rotation = {
        --    Type = "StaticRotation",
        --    Rotation = RotationMatrix_Y_45
        --},
        Translation = {
            Type = "StaticTranslation",
            Position = {0.2, -0.07, -0.1}
        }
    },

    GuiPath = "/Solar System/Planets/Mars/Curiosity "
}




assetHelper.registerSceneGraphNodesAndExport(asset, {
    CuriosityPosition,
    RoverLocation,
    RA_Shoulder_AZ_Location,
    RA_Shoulder_EL_Location
   
})

