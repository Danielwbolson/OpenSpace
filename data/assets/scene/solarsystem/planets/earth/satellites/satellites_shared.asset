local transforms = asset.require('scene/solarsystem/planets/earth/transforms')
local assetHelper = asset.require('util/asset_helper')

local satImageFolder = asset.syncedResource({
    Name = "Satellite Image Files",
    Type = "HttpSynchronization",
    Identifier = "tle_satellites_images",
    Version = 1
})

function downloadTLEFile(sceneAsset, url, name)
    local identifier = name
    identifier = identifier:gsub(" ", "")
    identifier = identifier:gsub("&", "")
    identifier = identifier:gsub("-", "")
    return sceneAsset.syncedResource({
        Name = "Satellite TLE Data (" .. name .. ")",
        Type = "UrlSynchronization",
        Identifier = "satellite_tle_data_" .. identifier,
        Url = url
    })
end

--registerSatelliteGroupObjects can be called with 3 options for specifying
--satellites. If the onlyThisEntry_string parameter is empty, then all satellites
--in the TLE file will be rendered. To render only one satellite from the file,
--the onlyThisEntry_string parameter is used. To specify the satellite by index
--in the TLE file, provide the index number (zero-based) of the satellite entry.
--Since there are 3 lines per satellite entry, this index corresponds to line
--number (3 * index + 1). To specify the satellite by name, provide the exact
--substring to search for. This search substring is matched against the identifier
--(every 3rd line) in the TLE file. It will render the first satellite it finds
--with the matching identifier substring of same length.
local registerSatelliteGroupObjects = function(containingAsset, group, tleFolder, onlyshouldAddDuplicates, onlyThisEntry_string)
    local filename = group.Url:match("([^/]+)$")
    local filenameSansExt = filename:gsub(filename:match("(%.%w+)$"), "")
    local path = tleFolder .. "/" .. filename

	function isEmpty(s)
	    return s == nil or s == ''
	end

    function numLinesInFile(filename)
        local ctr = 0
        for _ in io.lines(filename) do ctr = ctr + 1 end
        return ctr
    end

    -- Check format of a set of 3 TLE file lines and return nonzero if there is a format error
    function isValidTLEFileFormat(lineArr)
        if isEmpty(lineArr[1]) or isEmpty(lineArr[2]) or isEmpty(lineArr[3]) then
            return false
        end
        if string.sub(lineArr[2], 1, 2) ~= "1 " then
            return false
        end
        if string.sub(lineArr[3], 1, 2) ~= "2 " then
            return false
        end
        return true
    end

    function satellites(title, file, onlyThisEntry_num, onlyThisEntry_string, color)
		if onlyThisEntry_num ~= nil then
			renderableEntry = {
		        Type = "RenderableSatellites",
                Path = file,
                Segments = 120,
                Color = color,
                Fade = 0.5,
				OnlyThisIndex = onlyThisEntry_num
		    }
		elseif not isEmpty(onlyThisEntry_string) then
			renderableEntry = {
		        Type = "RenderableSatellites",
                Path = file,
                Segments = 120,
                Color = color,
                Fade = 0.5,
				OnlyThisName = onlyThisEntry_string
		    }
		else
			renderableEntry = {
		        Type = "RenderableSatellites",
                Path = file,
                Segments = 120,
                Color = color,
                Fade = 0.5
		    }
		end
        return {
            Identifier = title,
            Parent = transforms.EarthInertial.Identifier,
            Renderable = renderableEntry,
            --Tag = { "earth_satellite_" .. group, "earth_satellite_" .. group .. "_trail"},
            GUI = {
                Path = "/Solar System/Planets/Earth/Satellites"
            }
        }
    end

	--nLines = numLinesInFile(path)
	onlyThisEntry_num = nil
	if not isEmpty(onlyThisEntry_string) then
	  onlyThisEntry_num = tonumber(onlyThisEntry_string)
	  if onlyThisEntry_num then
	    onlyThisEntry_string = nil
	  end
	end
    local SatelliteBatch = satellites(filenameSansExt, path, onlyThisEntry_num, onlyThisEntry_string, group.TrailColor)
    assetHelper.registerSceneGraphNodesAndExport(containingAsset, { SatelliteBatch })
end

asset.export("downloadTLEFile", downloadTLEFile)
asset.export("registerSatelliteGroupObjects", registerSatelliteGroupObjects)
