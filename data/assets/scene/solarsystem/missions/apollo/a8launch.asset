local assetHelper = asset.require('util/asset_helper')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')
asset.require('spice/base')
local csm = asset.require('./apollo_csm')

--1968 DEC 21 12:51:51

local kernels = asset.syncedResource({
    Name = "Apollo Kernels",
    Type = "HttpSynchronization",
    Identifier = "apollo_spice",
    Version = 1
})

local LocalKernels = {
    kernels .. "/moon_080317.tf",
    kernels .. "/apollo8.tf",
  	kernels .. "/moon_pa_de421_1900-2050.bpc",
    kernels .. '/apollo8.tsc',
    kernels .. '/apollo8.bsp',
    kernels .. '/apollo8_earthrise.bc',
}

local Apollo8LaunchPosition = {
    Identifier = "Apollo8_Launch",
    Parent = "Earth",
    TimeFrame = { -- Using Spice kernels for 1850-2150
        Type = "TimeFrameInterval",
        Start = "1968 DEC 21",
        End = "1968 DEC 23 19:18:22 "
    },
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = "-908",
            Observer = "EARTH",
            Frame = "IAU_EARTH",            
            Kernels = LocalKernels
        },
    },
    GUI = {
        Name = "Apollo 8 Launch",
        Path = "/Solar System/Missions/Apollo/Apollo 8"
    }
}

local Apollo8LaunchModel = {
    Identifier = "Apollo_8ModelLaunch",
    Parent = Apollo8LaunchPosition.Identifier,
    Transform = {
        Scale = {
            Type = "StaticScale",
            -- The scale of the model is in cm; OpenSpace is in m
            Scale = 0.01
        }
    },
    GUI = {
        Hidden = true,
        Name = "Apollo 8 Model Launch",
        Path = "/Solar System/Missions/Apollo/Apollo 8"
    }
}

local Apollo8LaunchTrail = {
    Identifier = "Apollo8TrailLaunch",
    Parent = "Earth",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = "-908",
            Observer = "EARTH",
            Frame = "IAU_EARTH",            
            Kernels = LocalKernels
        },
        Color = { 0.70, 0.50, 0.20 },
        StartTime = "1968 DEC 21 12:51:00",
        EndTime = "1968 DEC 21 23:23:22",
        SampleInterval = 30
    },
    GUI = {
        Name = "Apollo 8 Trail Launch",
        Path = "/Solar System/Missions/Apollo"
    }
}


local exportList = {   
    Apollo8LaunchPosition, 
    Apollo8LaunchModel, 
    Apollo8LaunchTrail
}


assetHelper.registerSceneGraphNodesAndExport(asset, exportList)

-- Registering Command and Service module needs to happen fter the export list
-- has been registered, since it depends on the Apollo8Model scene graph node.
csm.registerCsm(asset, Apollo8Model.Identifier)