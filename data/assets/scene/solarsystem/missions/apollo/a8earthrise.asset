local assetHelper = asset.require('util/asset_helper')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')
local csm = asset.require('./apollo_csm')

asset.require('spice/base')

local kernels = asset.syncedResource({
    Name = "Apollo Kernels",
    Type = "HttpSynchronization",
    Identifier = "apollo_spice",
    Version = 1
})

local LocalKernels = {
    kernels .. "/moon_080317.tf",
    kernels .. "/apollo8.tf",
    kernels .. "/moon_pa_de421_1900-2050.bpc",
    kernels .. '/apollo8.tsc',
    kernels .. '/apollo8.bsp',
    kernels .. '/apollo8_earthrise.bc',
}

-- 1968 DEC 24 16:37:19.0

local Apollo8EarthrisePosition = {
    Identifier = "Apollo8_Earthrise",
    Parent = "Moon",
    TimeFrame = { -- Using Spice kernels for 1850-2150
        Type = "TimeFrameInterval",
        Start = "1968 DEC 22 04:18:22",
        End = "1968 DEC 28"
    },
    Transform = {
        Translation = {
            Type = "SpiceTranslation",
            Target = "-908",
            Observer = "MOON",
            Frame = "IAU_MOON",
            Kernels = LocalKernels
        },
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "A8_EARTHRISE",
            DestinationFrame = "GALACTIC"
        },
    },
    GUI = {
        Name = "Apollo 8 EarthRise",
        Path = "/Solar System/Missions/Apollo/Apollo 8"
    }
}

local Apollo8Model = {
    Identifier = "Apollo_8ModelEarthRise",
    Parent = Apollo8EarthrisePosition.Identifier,
    Transform = {
        Scale = {
            Type = "StaticScale",
            -- The scale of the model is in cm; OpenSpace is in m
            Scale = 0.01
        }
    },
    GUI = {
        Hidden = true,
        Name = "Apollo 8 Model",
        Path = "/Solar System/Missions/Apollo/Apollo 8"
    }
}

local PivotOffset = { -6.9, -4.6,  8.7 }

local A8Pivot = {
    Identifier = "A8Pivot",
    Parent = Apollo8EarthrisePosition.Identifier,
    Transform = {
        Translation = {
            Type = "StaticTranslation",
            Position = PivotOffset
        },
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "GALACTIC",
            DestinationFrame = "A8_EARTHRISE"
        },

    },
    GUI = {
        Hidden = false,
        Name = "Apollo 8 Pivot",
        Path = "/Solar System/Missions/Apollo/Apollo 8"
    }
}

local Apollo_8_Trail = {
    Identifier = "Apollo8TrailEarthrise",
    Parent = "Moon",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = "-908",
            Observer = "MOON",
            Frame = "IAU_MOON",            
            Kernels = LocalKernels
        },
        Color = { 0.70, 0.50, 0.20 },
        StartTime = "1968 DEC 22 04:18:22",
        EndTime = "1968 DEC 28",
        SampleInterval = 30
    },
    GUI = {
        Name = "Apollo 8 Trail EarthRise",
        Path = "/Solar System/Missions/Apollo"
    }
}

local Apollo_8_Trail_Full = {
    Identifier = "Apollo8TrailFull",
    Parent = "Moon",
    Renderable = {
        Type = "RenderableTrailTrajectory",
        Translation = {
            Type = "SpiceTranslation",
            Target = "-908",
            Observer = "MOON",
            Frame = "IAU_MOON",            
            Kernels = LocalKernels
        },
        Color = { 0.70, 0.50, 0.20 },
        StartTime = "1968 DEC 21",
        EndTime = "1968 DEC 28",
        SampleInterval = 30,
        Enabled = false,
    },
    GUI = {
        Name = "Apollo 8 Trail FULL",
        Path = "/Solar System/Missions/Apollo"
    }
}


local exportList = {    
    Apollo8EarthrisePosition, 
    Apollo8Model,
    A8Pivot, 
    Apollo_8_Trail,
    Apollo_8_Trail_Full,
}

assetHelper.registerSceneGraphNodesAndExport(asset, exportList)
-- Registering Command and Service module needs to happen fter the export list
-- has been registered, since it depends on the Apollo8Model scene graph node.
csm.registerCsm(asset, Apollo8Model.Identifier)